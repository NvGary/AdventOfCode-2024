import { applyMovements, loadFromFile, sumBoxPositions } from './warehouse-x';
import { Direction, StringArray2D } from '../array2d';

describe('warehouse utils', () => {
    let warehouse: ReturnType<typeof loadFromFile>;

    beforeEach(() => {
        warehouse = loadFromFile('./lib/11-15/test/warehouse.txt');
    });

    describe('function loadFromFile', () => {
        it('loads data correctly', () => {
            const { layout, movement } = warehouse;

            expect(layout.grid).toEqual([
                ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                ['#', '#', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '[', ']', '.', '.', '[', ']', '#', '#'],
                ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '[', ']', '.', '.', '#', '#'],
                ['#', '#', '.', '.', '[', ']', '[', ']', '.', '.', '.', '.', '[', ']', '.', '.', '[', ']', '#', '#'],
                ['#', '#', '.', '.', '.', '.', '[', ']', '@', '.', '.', '.', '.', '.', '[', ']', '.', '.', '#', '#'],
                ['#', '#', '[', ']', '#', '#', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '.', '.', '#', '#'],
                ['#', '#', '[', ']', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '[', ']', '.', '.', '#', '#'],
                ['#', '#', '.', '.', '[', ']', '[', ']', '.', '.', '[', ']', '.', '.', '[', ']', '[', ']', '#', '#'],
                ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '.', '.', '#', '#'],
                ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
            ]);

            expect(movement.slice(0, 4)).toEqual([Direction.WEST, Direction.SOUTH, Direction.SOUTH, Direction.EAST]);
            expect(movement.pop()).toBe(Direction.NORTH);
        });
    });

    describe('function applyMovements', () => {
        describe('smaller sample data', () => {
            const data = [
                ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                ['#', '#', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '#', '#'],
                ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
                ['#', '#', '.', '.', '.', '.', '[', ']', '[', ']', '@', '.', '#', '#'],
                ['#', '#', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '#', '#'],
                ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
                ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
            ];

            it('steps 1 direction correctly', () => {
                const smallerWarehouse = {
                    layout: new StringArray2D().loadFromData(data),
                    movement: [Direction.WEST]
                };
                const res = applyMovements(smallerWarehouse);
                expect(res.grid).toEqual([
                    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '[', ']', '[', ']', '@', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                ]);
            });

            it('steps 5 directions correctly', () => {
                const smallerWarehouse = {
                    layout: new StringArray2D().loadFromData(data),
                    movement: [Direction.WEST, Direction.SOUTH, Direction.SOUTH, Direction.WEST, Direction.WEST]
                };
                const res = applyMovements(smallerWarehouse);
                expect(res.grid).toEqual([
                    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '[', ']', '[', ']', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '@', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                ]);
            });

            it('steps 6 directions correctly', () => {
                const smallerWarehouse = {
                    layout: new StringArray2D().loadFromData(data),
                    movement: [
                        Direction.WEST,
                        Direction.SOUTH,
                        Direction.SOUTH,
                        Direction.WEST,
                        Direction.WEST,
                        Direction.NORTH,
                    ]
                };
                const res = applyMovements(smallerWarehouse);
                expect(res.grid).toEqual([
                    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '[', ']', '[', ']', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '@', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                ]);
            });

            it('steps 7 directions correctly', () => {
                const smallerWarehouse = {
                    layout: new StringArray2D().loadFromData(data),
                    movement: [
                        Direction.WEST,
                        Direction.SOUTH,
                        Direction.SOUTH,
                        Direction.WEST,
                        Direction.WEST,
                        Direction.NORTH,
                        Direction.NORTH
                    ]
                };
                const res = applyMovements(smallerWarehouse);
                expect(res.grid).toEqual([
                    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '[', ']', '[', ']', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '@', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                ]);
            });

            it('steps 10 directions correctly', () => {
                const smallerWarehouse = {
                    layout: new StringArray2D().loadFromData(data),
                    movement: [
                        Direction.WEST,
                        Direction.SOUTH,
                        Direction.SOUTH,
                        Direction.WEST,
                        Direction.WEST,
                        Direction.NORTH,
                        Direction.NORTH,
                        Direction.WEST,
                        Direction.WEST,
                        Direction.NORTH
                    ]
                };
                const res = applyMovements(smallerWarehouse);
                expect(res.grid).toEqual([
                    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '[', ']', '[', ']', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '@', '[', ']', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                ]);
            });

            it('steps 11 directions correctly', () => {
                const smallerWarehouse = {
                    layout: new StringArray2D().loadFromData(data),
                    movement: [
                        Direction.WEST,
                        Direction.SOUTH,
                        Direction.SOUTH,
                        Direction.WEST,
                        Direction.WEST,
                        Direction.NORTH,
                        Direction.NORTH,
                        Direction.WEST,
                        Direction.WEST,
                        Direction.NORTH,
                        Direction.NORTH
                    ]
                };
                const res = applyMovements(smallerWarehouse);
                expect(res.grid).toEqual([
                    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                    ['#', '#', '.', '.', '.', '[', ']', '.', '#', '#', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '@', '.', '[', ']', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
                    ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                ]);
            });
        });

        it('applies movements correctly', () => {
            const res = applyMovements(warehouse);

            expect(res.grid).toEqual([
                ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
                ['#', '#', '[', ']', '.', '.', '.', '.', '.', '.', '.', '[', ']', '.', '[', ']', '[', ']', '#', '#'],
                ['#', '#', '[', ']', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '[', ']', '.', '#', '#'],
                ['#', '#', '[', ']', '.', '.', '.', '.', '.', '.', '.', '.', '[', ']', '[', ']', '[', ']', '#', '#'],
                ['#', '#', '[', ']', '.', '.', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '[', ']', '#', '#'],
                ['#', '#', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '#', '#'],
                ['#', '#', '.', '.', '[', ']', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
                ['#', '#', '.', '.', '@', '.', '.', '.', '.', '.', '.', '[', ']', '.', '[', ']', '[', ']', '#', '#'],
                ['#', '#', '.', '.', '.', '.', '.', '.', '[', ']', '[', ']', '.', '.', '[', ']', '.', '.', '#', '#'],
                ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
            ]);
        });
    });

    describe('function sumBoxPositions', () => {
        it('calculates properly', () => {
            const res = sumBoxPositions(applyMovements(warehouse));

            expect(res).toBe(9021);
        });
    });
});
